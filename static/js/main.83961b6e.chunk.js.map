{"version":3,"sources":["components/Navbar/Navbar.module.css","components/Dialogs/Dialogs.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/Info/Info.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Header/Header.module.css","components/Navbar/Navbar.tsx","components/Profile/MyPosts/Post/Post.tsx","components/Profile/MyPosts/MyPosts.tsx","components/Profile/Info/Info.tsx","components/Profile/Profile.tsx","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx","redux/state.ts","components/Header/Header.tsx","components/News/News.tsx","components/Music/Music.tsx","components/Settings/Settings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["module","exports","Navbar","className","s","nav","item","to","activeClassName","activeLink","Post","props","posts","src","message","likeCounter","MyPosts","postElements","map","it","post","elem","block","placeholder","textarea","maxLength","value","onChange","e","changeNewText","currentTarget","button","onClick","addPostCallback","Info","images","photo","info","status","Profile","addPost","DialogItem","dialog","id","name","Message","Dialogs","dialodsElements","dialogs","messageElements","messages","dialogsItem","messagesItem","renderTree","console","log","state","profilePage","newPostText","dialogsPage","sidebar","postText","newText","Date","getTime","push","withRouter","titleHeader","location","pathname","substr","header","News","Music","Settings","App","path","render","Boolean","window","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"qGACAA,EAAOC,QAAU,CAAC,IAAM,oBAAoB,KAAO,qBAAqB,WAAa,6B,iBCArFD,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,OAAS,wBAAwB,aAAe,8BAA8B,QAAU,yBAAyB,SAAW,0BAA0B,OAAS,0B,gBCA/PD,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,KAAO,sBAAsB,SAAW,0BAA0B,OAAS,0B,gBCA5HD,EAAOC,QAAU,CAAC,OAAS,qBAAqB,KAAO,mBAAmB,MAAQ,oBAAoB,KAAO,qB,qBCA7GD,EAAOC,QAAU,CAAC,KAAO,qB,sCCAzBD,EAAOC,QAAU,CAAC,OAAS,yB,4NCyBZC,EAtBA,WACX,OACI,yBAAKC,UAAWC,IAAEC,KACd,yBAAKF,UAAWC,IAAEE,MACd,kBAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBJ,IAAEK,YAA1C,cAEJ,yBAAKN,UAAWC,IAAEE,MACd,kBAAC,IAAD,CAASC,GAAG,WAAWC,gBAAiBJ,IAAEK,YAA1C,eAEJ,yBAAKN,UAAWC,IAAEE,MACd,kBAAC,IAAD,CAASC,GAAG,QAAQC,gBAAiBJ,IAAEK,YAAvC,WAEJ,yBAAKN,UAAWC,IAAEE,MACd,kBAAC,IAAD,CAASC,GAAG,SAASC,gBAAiBJ,IAAEK,YAAxC,YAEJ,yBAAKN,UAAWC,IAAEE,MACd,kBAAC,IAAD,CAASC,GAAG,YAAYC,gBAAiBJ,IAAEK,YAA3C,iB,iCCADC,EAZF,SAACC,GACb,OAAO,yBAAKR,UAAWC,IAAEQ,OACxB,yBAAKT,UAAWC,IAAEE,MACjB,yBAAKO,IAAI,4DACRF,EAAMG,SAER,6BACC,sCAAYH,EAAMI,gBC4BNC,EA/BC,SAACL,GAEhB,IAAIM,EAAeN,EAAMC,MAAMM,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAML,QAASK,EAAGC,KAAML,YAAaI,EAAGJ,iBASjF,OACC,yBAAKZ,UAAWC,IAAEiB,MACjB,yBAAKlB,UAAWC,IAAEkB,OAAlB,cAEC,6BACC,8BAAUC,YAAY,qBACrBpB,UAAWC,IAAEoB,SACbC,UAAW,IACXC,MAAOf,EAAMG,QACba,SAXmB,SAACC,GAA0CjB,EAAMkB,cAAcD,EAAEE,cAAcJ,UAYnG,4BAAQvB,UAAWC,IAAE2B,OAAQC,QAjBjB,WACfrB,EAAMsB,gBAAgBtB,EAAMG,SAC5BH,EAAMkB,cAAc,MAejB,aAED,yBAAK1B,UAAWC,IAAEQ,OAChBK,M,gBCXSiB,EAtBF,WACZ,OACC,yBAAK/B,UAAWC,IAAEE,MACjB,yBAAKH,UAAWC,IAAE+B,QACjB,yBAAKtB,IAAI,yDAEV,yBAAKV,UAAWC,IAAEgC,OACjB,yBAAKvB,IAAI,kHAEV,yBAAKV,UAAWC,IAAEiC,MACjB,6BACC,+CAED,yBAAKlC,UAAWC,IAAEkC,YCQPC,EAZC,SAAC5B,GAChB,OACC,6BACC,kBAAC,EAAD,MACA,kBAAC,EAAD,CAASC,MAAOD,EAAMC,MACrBqB,gBAAiBtB,EAAM6B,QACvB1B,QAASH,EAAMG,QACfe,cAAelB,EAAMkB,kB,gBCFVY,EARI,SAAC9B,GAChB,OACI,yBAAKR,UAAWC,IAAEsC,QACd,kBAAC,IAAD,CAASnC,GAAI,YAAcI,EAAMgC,IAAKhC,EAAMiC,QCAzCC,EALC,SAAClC,GACb,OAAO,yBAAKR,UAAWC,IAAEU,SAAUH,EAAMG,UC2B9BgC,EAxBC,SAACnC,GACb,IAAIoC,EAAkBpC,EAAMqC,QAAQ9B,KAAI,SAAAC,GAAE,OAAI,kBAAC,EAAD,CAAYyB,KAAMzB,EAAGyB,KAAMD,GAAIxB,EAAGwB,QAC5EM,EAAkBtC,EAAMuC,SAAShC,KAAI,SAAAG,GAAI,OAAI,kBAAC,EAAD,CAASP,QAASO,EAAKP,aAIxE,OACI,yBAAKX,UAAWC,IAAE4C,SACd,yBAAK7C,UAAWC,IAAE+C,aACbJ,GAEL,yBAAK5C,UAAWC,IAAEgD,cACbH,EACD,6BACA,8BAAU1B,YAAY,qBAClBpB,UAAWC,IAAEoB,WACjB,4BAAQrB,UAAWC,IAAE2B,QAArB,YC3BZsB,EAAa,WACbC,QAAQC,IAAI,UAoCZC,EAAuB,CACvBC,YAAa,CACT7C,MAAO,CACH,CAAEQ,KAAM,0BAA2BuB,GAAI,EAAG5B,YAAa,GACvD,CAAEK,KAAM,kBAAmBuB,GAAI,EAAG5B,YAAa,IAC/C,CAAEK,KAAM,UAAWuB,GAAI,EAAG5B,YAAa,KAE3C2C,YAAa,IAEjBC,YAAa,CACRX,QAAS,CACN,CAAEJ,KAAM,KAAMD,GAAI,GAClB,CAAEC,KAAM,QAASD,GAAI,GACrB,CAAEC,KAAM,SAAUD,GAAI,GACtB,CAAEC,KAAM,QAASD,GAAI,GACrB,CAAEC,KAAM,QAASD,GAAI,IAGzBO,SAAU,CACN,CAAEpC,QAAS,QAAS6B,GAAI,GACxB,CAAE7B,QAAS,KAAM6B,GAAI,GACrB,CAAE7B,QAAS,MAAO6B,GAAI,GACtB,CAAE7B,QAAS,UAAW6B,GAAI,GAC1B,CAAE7B,QAAS,aAAc6B,GAAI,KAGrCiB,QAAS,IAGApB,EAAU,SAACqB,GACpB,IAAMC,EAAU,CACZnB,IAAI,IAAIoB,MAAOC,UACf5C,KAAMyC,EACN9C,YAAa,GAEjByC,EAAMC,YAAY7C,MAAMqD,KAAKH,GAC7BT,KAGSxB,EAAgB,SAACiC,GAC1BN,EAAMC,YAAYC,YAAcI,EAChCT,KAIWG,I,iBCrEAU,eAT8C,SAACvD,GAC1D,IAAMwD,EAAcxD,EAAMyD,SAASC,SAASC,OAAO,GACnD,OAAO,yBAAKnE,UAAWC,IAAEmE,QACpBJ,MCCMK,EANF,WACT,OAAO,sCCKIC,EAND,WACV,OAAO,uCCKIC,EANE,WACb,OAAO,0CCuCIC,EA7BH,WAEV,OACE,kBAAC,IAAD,KACE,yBAAKxE,UAAU,cACb,kBAAC,EAAD,MACA,yBAAKA,UAAU,WACb,kBAAC,EAAD,MAEA,kBAAC,IAAD,CAAOyE,KAAK,WACVC,OAAQ,kBAAM,kBAAC,EAAD,CAASjE,MAAO4C,EAAMC,YAAY7C,MAC9C4B,QAASA,EACT1B,QAAS0C,EAAMC,YAAYC,YAC3B7B,cAAeA,OACnB,kBAAC,IAAD,CAAO+C,KAAK,WACVC,OAAQ,kBAAM,kBAAC,EAAD,CAAS7B,QAASQ,EAAMG,YAAYX,QAChDE,SAAUM,EAAMG,YAAYT,cAChC,kBAAC,IAAD,CAAO0B,KAAK,QACVC,OAAQ,kBAAM,kBAAC,EAAD,SAChB,kBAAC,IAAD,CAAOD,KAAK,SACVC,OAAQ,kBAAM,kBAAC,EAAD,SAChB,kBAAC,IAAD,CAAOD,KAAK,YACVC,OAAQ,kBAAM,kBAAC,EAAD,aCvBNC,QACW,cAA7BC,OAAOX,SAASY,UAEe,UAA7BD,OAAOX,SAASY,UAEhBD,OAAOX,SAASY,SAASC,MACvB,2DCTC,IAAI5B,EAAa,WACtB6B,IAASL,OACP,kBAAC,IAAMM,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,UAG5BhC,IPZIA,EOaMA,EDyHJ,kBAAmBiC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvC,QAAQuC,MAAMA,EAAM/E,c","file":"static/js/main.83961b6e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"nav\":\"Navbar_nav__p-KI8\",\"item\":\"Navbar_item__1ZQKD\",\"activeLink\":\"Navbar_activeLink__1YtlV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__1_wZ4\",\"dialogsItem\":\"Dialogs_dialogsItem__1eZ6k\",\"dialog\":\"Dialogs_dialog__PXViI\",\"messagesItem\":\"Dialogs_messagesItem__BK3z-\",\"message\":\"Dialogs_message__jwtLx\",\"textarea\":\"Dialogs_textarea__90J-H\",\"button\":\"Dialogs_button__3iQ2w\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"block\":\"MyPosts_block__2A8II\",\"elem\":\"MyPosts_elem__3mAkv\",\"textarea\":\"MyPosts_textarea__1fgaY\",\"button\":\"MyPosts_button__12GhI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"images\":\"Info_images__I-n4Q\",\"item\":\"Info_item__2xQyW\",\"photo\":\"Info_photo__1Gbya\",\"info\":\"Info_info__1u36x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__3K06q\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"header\":\"Header_header__1kxpG\"};","import React from 'react';\r\nimport s from './Navbar.module.css';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Navbar = () => {\r\n    return (\r\n        <nav className={s.nav}>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/profile\" activeClassName={s.activeLink}> Profile </NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/dialogs\" activeClassName={s.activeLink}> Messages </NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/news\" activeClassName={s.activeLink}> News </NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/music\" activeClassName={s.activeLink}> Music </NavLink>\r\n            </div>\r\n            <div className={s.item}>\r\n                <NavLink to=\"/settings\" activeClassName={s.activeLink}> Settings </NavLink>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Navbar;","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\ntype PostPropsType = {\r\n\tmessage: string\r\n\tlikeCounter: number\r\n}\r\n\r\nconst Post = (props: PostPropsType) => {\r\n\treturn <div className={s.posts}>\r\n\t\t<div className={s.item}>\r\n\t\t\t<img src=\"https://image.freepik.com/free-photo/_23-2147890098.jpg\" />\r\n\t\t\t{props.message}\r\n\t\t</div>\r\n\t\t<div>\r\n\t\t\t<span>like {props.likeCounter}</span>\r\n\t\t</div>\r\n\t</div>\r\n}\r\n\r\nexport default Post;","import React, { ChangeEvent } from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport { PostsType } from '../../../redux/state';\r\n\r\ntype MyPostsPropsType = {\r\n\tposts: Array<PostsType>\r\n\taddPostCallback: (postText: string) => void\r\n\tmessage: string\r\n\tchangeNewText: (newText: string) => void\r\n}\r\n\r\nconst MyPosts = (props: MyPostsPropsType) => {\r\n\r\n\tlet postElements = props.posts.map(it => <Post message={it.post} likeCounter={it.likeCounter} />)\r\n\r\n\tconst addPost = () => {\r\n\t\tprops.addPostCallback(props.message);\r\n\t\tprops.changeNewText('')\r\n\t}\r\n\r\n\tconst newTextHeandler = (e: ChangeEvent<HTMLTextAreaElement>) => { props.changeNewText(e.currentTarget.value) }\r\n\r\n\treturn (\r\n\t\t<div className={s.elem}>\r\n\t\t\t<div className={s.block}>\r\n\t\t\t\tWhat's new?\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<textarea placeholder=\"Enter your message\"\r\n\t\t\t\t\t\tclassName={s.textarea}\r\n\t\t\t\t\t\tmaxLength={124}\r\n\t\t\t\t\t\tvalue={props.message}\r\n\t\t\t\t\t\tonChange={newTextHeandler} />\r\n\t\t\t\t\t<button className={s.button} onClick={addPost} >Add post</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={s.posts}>\r\n\t\t\t\t\t{postElements}\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n}\r\n\r\nexport default MyPosts;","import React from 'react';\r\nimport s from './Info.module.css';\r\n\r\nconst Info = () => {\r\n\treturn (\r\n\t\t<div className={s.item}>\r\n\t\t\t<div className={s.images}>\r\n\t\t\t\t<img src=\"https://image.freepik.com/free-photo/_1232-2082.jpg\" />\r\n\t\t\t</div>\r\n\t\t\t<div className={s.photo}>\r\n\t\t\t\t<img src=\"https://pyxis.nymag.com/v1/imgs/079/792/3ed0d94be0a9bd3d023f00532889bab152-30-chandler-bing.rsquare.w330.jpg\" />\r\n\t\t\t</div>\r\n\t\t\t<div className={s.info}>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<h2> Chandler Bing</h2>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div className={s.status}>\r\n\t\t\t\t\t\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t)\r\n\r\n}\r\n\r\nexport default Info;","import React from 'react';\r\nimport MyPosts from './MyPosts/MyPosts';\r\nimport Info from './Info/Info';\r\nimport {PostsType} from '../../redux/state'\r\n\r\ntype PropsType = {\r\n\tposts: Array<PostsType>\r\n\taddPost: (postText: string) => void\r\n\tmessage: string\r\n\tchangeNewText: (newText: string) => void\r\n}\r\n\r\nconst Profile = (props: PropsType) => {\r\n\treturn (\r\n\t\t<div>\r\n\t\t\t<Info />\r\n\t\t\t<MyPosts posts={props.posts} \r\n\t\t\t\taddPostCallback={props.addPost}\r\n\t\t\t\tmessage={props.message}\r\n\t\t\t\tchangeNewText={props.changeNewText}/>\r\n\t\t</div> \r\n\t)\r\n}\r\n\r\nexport default Profile;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nexport type DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n}\r\n\r\nconst DialogItem = (props: DialogItemPropsType) => {\r\n    return (\r\n        <div className={s.dialog}>\r\n            <NavLink to={\"/dialogs/\" + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport s from './../Dialogs.module.css'\r\n\r\ntype MessagePropsType = {\r\n    message: string\r\n}\r\n\r\nconst Message = (props: MessagePropsType) => {\r\n    return <div className={s.message}>{props.message}</div>\r\n}\r\n\r\n\r\nexport default Message;","import React from 'react';\r\nimport s from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport Message from './Message/Message';\r\nimport { DialogsType, MessagesType } from '../../redux/state';\r\n\r\ntype PropsType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n}\r\n\r\nconst Dialogs = (props: PropsType) => {\r\n    let dialodsElements = props.dialogs.map(it => <DialogItem name={it.name} id={it.id} />);\r\n    let messageElements = props.messages.map(elem => <Message message={elem.message} />);\r\n\r\n \r\n\r\n    return (\r\n        <div className={s.dialogs}>\r\n            <div className={s.dialogsItem}>\r\n                {dialodsElements}\r\n            </div>\r\n            <div className={s.messagesItem}>\r\n                {messageElements}\r\n                <div>\r\n                <textarea placeholder=\"Enter your message\"\r\n                    className={s.textarea}/>\r\n                <button className={s.button}>Send</button>\r\n            </div>\r\n            </div>\r\n            \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Dialogs;","let renderTree = () => {\r\n    console.log('hello');   \r\n}\r\n\r\nexport const subscribe = (observer: () => void) => {\r\n    renderTree = observer;\r\n}\r\n\r\nexport type MessagesType = {\r\n    message: string\r\n    id: number\r\n}\r\nexport type DialogsType = {\r\n    name: string\r\n    id: number\r\n}\r\nexport type PostsType = {\r\n    post: string\r\n    id: number\r\n    likeCounter: number\r\n}\r\nexport type ProfilePageType = {\r\n    newPostText: string\r\n    posts: Array<PostsType>\r\n}\r\nexport type DialogsPageType = {\r\n    dialogs: Array<DialogsType>\r\n    messages: Array<MessagesType>\r\n}\r\nexport type SidebarType = {}\r\nexport type RootStateType = {\r\n    profilePage: ProfilePageType\r\n    dialogsPage:DialogsPageType\r\n    sidebar: SidebarType\r\n}\r\n\r\n\r\nlet state: RootStateType = {\r\n    profilePage: {\r\n        posts: [\r\n            { post: \"Hello! It`s my new App!\", id: 1, likeCounter: 5 },\r\n            { post: \"Today I'm happy\", id: 2, likeCounter: 18 },\r\n            { post: \"Welcome\", id: 3, likeCounter: 10 },\r\n        ],\r\n        newPostText: '',\r\n    },\r\n    dialogsPage: {\r\n         dialogs: [\r\n            { name: \"Ed\", id: 1 },\r\n            { name: \"Alina\", id: 2 },\r\n            { name: \"Oksana\", id: 3 },\r\n            { name: \"Sasha\", id: 4 },\r\n            { name: \"Tanya\", id: 5 },\r\n          ],\r\n          \r\n        messages: [\r\n            { message: \"Hello\", id: 1 },\r\n            { message: \":)\", id: 2 },\r\n            { message: \"Wow\", id: 3 },\r\n            { message: \"Ahahaha\", id: 4 },\r\n            { message: \"I`m fine(:\", id: 5 },\r\n          ],\r\n    },\r\n    sidebar: {}\r\n}\r\n\r\nexport const addPost = (postText: string) => {\r\n    const newText = {\r\n        id: new Date().getTime(),\r\n        post: postText,\r\n        likeCounter: 0\r\n    }\r\n    state.profilePage.posts.push(newText);\r\n    renderTree();\r\n}\r\n\r\nexport const changeNewText = (newText: string) => {\r\n    state.profilePage.newPostText = newText;\r\n    renderTree();\r\n}\r\n\r\n\r\nexport default state;","import React from 'react';\r\nimport s from './Header.module.css';\r\nimport { RouteComponentProps, withRouter } from 'react-router-dom';\r\n\r\nconst Header: React.FunctionComponent<RouteComponentProps> = (props: RouteComponentProps) => {\r\n    const titleHeader = props.location.pathname.substr(1)\r\n    return <div className={s.header}>\r\n        {titleHeader}\r\n    </div>\r\n}\r\n\r\n\r\n\r\nexport default withRouter(Header);\r\n","import React from 'react';\r\n\r\nconst News = () => {\r\n    return <div>\r\n        News\r\n    </div>\r\n}\r\n\r\nexport default News;\r\n","import React from 'react';\r\n\r\nconst Music = () => {\r\n    return <div>\r\n        Music\r\n    </div>\r\n}\r\n\r\nexport default Music;\r\n","import React from 'react';\r\n\r\nconst Settings = () => {\r\n    return <div>\r\n        Settings\r\n    </div>\r\n}\r\n\r\nexport default Settings;\r\n","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar/Navbar';\nimport Profile from './components/Profile/Profile';\nimport Dialogs from './components/Dialogs/Dialogs';\nimport state, { addPost, changeNewText } from './redux/state';\nimport Header from './components/Header/Header';\nimport News from './components/News/News';\nimport Music from './components/Music/Music';\nimport Settings from './components/Settings/Settings';\n\n\nconst App = () => {\n\n  return (\n    <BrowserRouter>\n      <div className=\"appWrapper\">\n        <Navbar />\n        <div className=\"content\">\n          <Header />\n\n          <Route path='/profile'\n            render={() => <Profile posts={state.profilePage.posts}\n              addPost={addPost}\n              message={state.profilePage.newPostText}\n              changeNewText={changeNewText} />} />\n          <Route path='/dialogs'\n            render={() => <Dialogs dialogs={state.dialogsPage.dialogs}\n              messages={state.dialogsPage.messages} />} />\n          <Route path='/news'\n            render={() => <News />} />\n          <Route path='/music'\n            render={() => <Music />} />\n          <Route path='/settings'\n            render={() => <Settings />} />\n        </div>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import './index.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { subscribe } from './redux/state';\nimport * as serviceWorker from './serviceWorker'\n\n\nexport let renderTree = () => {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n  );\n}\nrenderTree();\nsubscribe(renderTree);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}